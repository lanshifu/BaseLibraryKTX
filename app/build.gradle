apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.codoon.threadtracker'

apply plugin: 'com.didi.dokit'

def a = 1
def int b = 2
def c = "hello"

task method() {

//    assert 1+2 == 6
//    add(1,2)
//
//    def person = new Person();
//    person.increaseAge(5)
//    println("age=" + person.age)

    def x = 0
    for (i in 0..3){
        x+=i
    }
    assert x==6

    //遍历列表
    def y = 0
    for (i in [0,1,2,3]){
        y +=i
    }
    assert y==6

    //遍历map中取值
    def map = ['a':1,'b':2,"c":3,4:"d"]
    for (z in map.values()){
        println("value=$z")
    }


}

task switchTask(){
    def x = 16
    def result = ""
    switch (x) {
        case "ok":
            result = "string"
            break
        case 10..19:
            result = "range"
            break
        case Integer:
            result = "Integer"
            break

        default:
            result = "default"
    }

    assert result == "range"
}

task listDemo() {

    def s = 's'
    def ss = " $s"
    def sss = ''' sss'''
    def ssss = """ hahah $ss """

    def number = [1, 2, 3]
    assert number instanceof List

    //as 指定实现类为LinkedList
    def linkedList = [1,2,3] as LinkedList
    assert linkedList instanceof LinkedList


    //访问
    def numbers = [1,2,3,4]
    println("numbers[1] = ${numbers[1]}")
    println("numbers[-1] = ${numbers[-1]}") //-1 是末尾第一个元素
    numbers <<5 //列表末尾追加一个元素
    println("numbers[4] = ${numbers[4]}") //-1 是末尾第一个元素
    println("numbers[-1] = ${numbers[-1]}") //-1 是末尾第一个元素


    def map = ['one':'1','two':'3',3:"three"]
    println("map[one]=${map['one']}")
    println("map[3]=${map[3]}")

    def p1 = {println it} //使用隐式参数it的闭包

    def p2 = {its -> println its} //it是一个显式参数

    assert p2 instanceof Closure

    def nameValue = {String name,String value ->
        println "name=$name,value=$value"
    }

    //调用闭包，可以当做方法调用，也可以显显式调用call
    p2("i am p2")
    nameValue.call("蓝师傅","蓝师傅")

    def filePath = "demo.txt"
    def file = new File(filePath)
    //遍历每一行
    file.eachLine {
        println it
    }

    //更简洁，直接读取文本
    println file.text

    file.withPrintWriter {
        it.println("写入第1行")
        it.println("写入第2行")
    }
    file.withWriterAppend {
        it.println("追加写入第3行")
        it.println("追加写入第4行")
    }
    println file.text

}



//跟java一样
def add(int a,int b){
    println(a + b)

}

//参数可以不写类型
def minux(a,b){
    return a-b
}

//定义返回值类型为int类型，可以不写return，最后一行为结果
int max(a,b){
    a*b
}

class Person {
    String name
    Integer age = 0

    def increaseAge(years) {
        this.age += years
    }
}

def hello1 = task(hello1){
    doFirst {
        println "hello1.doFirst"
    }

    doLast {
        println "hello1.doLast"
    }

}


def hello2 = task(hello2,group: BasePlugin.BUILD_GROUP,dependsOn: hello1)
hello2.doFirst {
    println "hello2.doFirst"
}
hello2.doLast {
    println "hello2.doLast"
}

tasks.create(name:"hello3"){
    doLast {
        println "hello3.doLast"
    }
}

task "task4"  {
    println "task4"
}



android {
    compileSdkVersion Version.compileSdkVersion
    defaultConfig {
        applicationId "com.lanshifu.baselibraryktx"
        minSdkVersion Version.minSdkVersion
        targetSdkVersion Version.targetSdkVersion
        versionCode Version.versionCode
        versionName Version.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        ndk {
            abiFilters 'armeabi-v7a'
        }

        externalNativeBuild {
            cmake {
                cFlags "-std=c11"
                abiFilters 'armeabi-v7a', 'arm64-v8a'
                //, 'armeabi','x86', 'x86_64'//ndk的版本不能超过17，要不编译不过
            }
        }


    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            keyAlias 'lizhigame'
            keyPassword 'lizhigame'
            storeFile file("../lizhigame.keystore")
            storePassword 'lizhigame'
        }
        release {
            keyAlias 'key'
            keyPassword 'lizhigame'
            storeFile file("../lizhigame.keystore")
            storePassword 'lizhigame'
        }
    }

    //打包重命名
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                //Basedebug_v1.0.0_2020-10-18.apk
                output -> output.outputFileName = "Base" + buildType.name + "_" + defaultConfig.versionName + "_" + new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC")) + ".apk"
            }
    }
}

dokitExt {
    //dokit 插件开关
    dokitPluginSwitch false
    //通用设置
    comm {
        //地图经纬度开关
        gpsSwitch false
        //网络开关
        networkSwitch false
        //大图开关
        bigImgSwitch false
    }

    slowMethod {
        //0:默认模式 打印函数调用栈 需添加指定入口  默认为application onCreate 和attachBaseContext
        //1:普通模式 运行时打印某个函数的耗时 全局业务代码函数插入
        strategy 0
        //函数功能开关
        methodSwitch false

        //调用栈模式配置
        stackMethod {
            //默认值为 5ms 小于该值的函数在调用栈中不显示
            thresholdTime 100
            //调用栈函数入口
            //enterMethods = ["com.didichuxing.doraemondemo.MainDebugActivity.test1"]
        }
        //普通模式配置
        normalMethod {
            //默认值为 500ms 小于该值的函数在运行时不会在控制台中被打印
            thresholdTime 500
            //需要针对函数插装的包名
            packageNames = ["com.didichuxing.doraemondemo"]
            //不需要针对函数插装的包名&类名
            methodBlacklist = ["com.didichuxing.doraemondemo.dokit"]
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation project(path: ':base_lib')
    implementation files('libs/PackerNg-1.1.0.jar')

    //BlurLayout 高斯模糊
    implementation Deps.blurkit

    implementation Deps.crashreport
    implementation Deps.nativecrashreport

    //hook 框架 https://github.com/tiann/epic/blob/master/README_cn.md
    implementation "me.weishu:epic:0.6.0"

    //快手高性能线上内存监控方案
    implementation 'com.kwai.koom:java-oom:1.0.4'

    //线程监控 https://github.com/codoon/ThreadTracker
    debugImplementation 'com.codoon.threadtracker:threadtracker:1.1.0'

    //https://github.com/youth5201314/banner
    implementation 'com.youth.banner:banner:2.1.0'

    implementation 'com.jaredrummler:android-shell:1.0.0'

}
configurations.all {
    resolutionStrategy {
        //解决v4包冲突，强制使用这个版本的v4包
        force 'com.android.support:support-v4:26.1.0'
    }
}